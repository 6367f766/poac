name: Linux

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  OPENSSL_VERSION: 'OpenSSL_1_1_1h'
  BOOST_VERSION: 1.75.0
  LIBGIT2_VERSION: 1.1.0

jobs:
  x86_64-unknown-linux-gnu:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug ] # TODO: Release
        compiler:
          - {
            cc: clang-7, cxx: clang++-7,
            pacakge: clang-7,
          }
          - {
            cc: clang-8, cxx: clang++-8,
            pacakge: clang-8,
          }
          - {
            cc: clang-9, cxx: clang++-9,
            pacakge: clang-9,
          }
          - {
            cc: clang-10, cxx: clang++-10,
            pacakge: clang-10,
          }
          - {
            cc: gcc-8, cxx: g++-8,
            pacakge: g++-8,
          }
          - {
            cc: gcc-9, cxx: g++-9,
            pacakge: g++-9,
          }
          - {
            cc: gcc-10, cxx: g++-10,
            pacakge: g++-10,
          }
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CACHE_KEY_PREFIX: ${{ github.job }}-${{ matrix.compiler.pacakge }}-${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v2.3.4

      - run: sudo apt-get -qq update
      - name: Install ${{ matrix.compiler.pacakge }}
        run: sudo apt-get install -y -qq pkg-config cmake ${{ matrix.compiler.pacakge }}

      - name: Install openssl
        if: startsWith(matrix.compiler.cc, 'clang')
        run: sudo apt-get install -y -qq libssl-dev

      - name: Restore & Cache openssl (${{ env.OPENSSL_VERSION }})
        if: startsWith(matrix.compiler.cc, 'gcc')
        uses: actions/cache@v2.1.3
        id: openssl-cache
        with:
          path: ${{ runner.temp }}/libs/openssl
          key: ${{ env.CACHE_KEY_PREFIX }}-openssl-${{ env.OPENSSL_VERSION }}
      - name: Install openssl (${{ env.OPENSSL_VERSION }}) as static
        if: startsWith(matrix.compiler.cc, 'gcc') && steps.openssl-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/openssl
          git clone -q -b ${{ env.OPENSSL_VERSION }} https://github.com/openssl/openssl.git
          cd openssl
          ./config --static -static --prefix=${{ runner.temp }}/libs/openssl
          make
          sudo make install
          echo "OPENSSL_ROOT_DIR=${{ runner.temp }}/libs/openssl" >> $GITHUB_ENV
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache boost (${{ env.BOOST_VERSION }})
        uses: actions/cache@v2.1.3
        id: boost-cache
        with:
          path: ${{ runner.temp }}/libs/boost
          key: ${{ env.CACHE_KEY_PREFIX }}-boost-${{ env.BOOST_VERSION }}
      - name: Install boost (${{ env.BOOST_VERSION }}) as static
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/boost
          git clone -q -b boost-${{ env.BOOST_VERSION }} --recursive https://github.com/boostorg/boost.git
          cd boost
          ./bootstrap.sh
          sudo ./b2 link=static install -j2 --prefix=${{ runner.temp }}/libs/boost || exit 0
        working-directory: ${{ runner.temp }}

      - name: Install libarchive
        run: sudo apt-get install -y -qq libarchive-dev

      - name: Restore & Cache libgit2 (${{ env.LIBGIT2_VERSION }})
        uses: actions/cache@v2.1.3
        id: libgit2-cache
        with:
          path: ${{ runner.temp }}/libs/libgit2
          key: ${{ env.CACHE_KEY_PREFIX }}-libgit2-${{ env.LIBGIT2_VERSION }}
      - name: Install libgit2 (${{ env.LIBGIT2_VERSION }}) as shared
        if: steps.libgit2-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/libgit2
          git clone -q -b v${{ env.LIBGIT2_VERSION }} https://github.com/libgit2/libgit2.git
          mkdir libgit2/build && cd libgit2/build
          cmake ..                                                 \
            -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/libgit2 \
            -DCMAKE_BUILD_TYPE=Release                             \
            -DBUILD_SHARED_LIBS=ON                                 \
            -DBUILD_CLAR=OFF                                       \
            -DCMAKE_C_FLAGS=-fPIC
          make
          sudo make install
        working-directory: ${{ runner.temp }}

      - run: mkdir build

      - name: Build Poac
        run: |
          cmake ..                                      \
            -DBUILD_TESTING=ON                          \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DPOAC_DEPS_DIR=${{ runner.temp }}/libs
          make
        working-directory: build

      - name: Test Poac
        if: matrix.compiler.cxx != 'g++-8'
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Running test
        if: matrix.compiler.cxx != 'g++-8'
        run: ./poac help
        working-directory: build

      - name: Print info of the executable file
        run: file ./poac
        working-directory: build

      - name: Upload pre-built binary
        uses: actions/upload-artifact@v2.2.1
        if: matrix.build_type == 'Release'
        with:
          name: ${{ github.job }}-${{ matrix.compiler.pacakge }}
          path: poac
